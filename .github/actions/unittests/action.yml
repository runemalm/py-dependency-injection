name: Run unittests

inputs:
  python-version:
    description: 'Python version to use'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pyenv from source
      run: |
        git clone https://github.com/pyenv/pyenv.git ~/.pyenv
        echo "PYENV_ROOT=$HOME/.pyenv" >> $GITHUB_ENV
        echo "$HOME/.pyenv/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install Python ${{ inputs.python-version }} via pyenv
      run: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init --path)"
        pyenv install -s ${{ inputs.python-version }}
        pyenv global ${{ inputs.python-version }}
        echo "${{ inputs.python-version }}" > .python-version
      shell: bash

    - name: Verify installed Python version
      run: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init --path)"
        ACTUAL=$(python -V)
        EXPECTED=${{ inputs.python-version }}
        echo "Python version installed: $ACTUAL"
        if ! python -V | grep -q "$EXPECTED"; then
          echo "Python version is not correct. Exiting."
          exit 1
        fi
      shell: bash

    - name: Install pipenv
      run: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init --path)"
        python -m pip install --upgrade pip
        pip install pipenv
      shell: bash

    - name: Setup virtual environment
      run: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init --path)"
        pipenv --python ${{ inputs.python-version }} install --dev --deploy
      shell: bash

    - name: Verify virtual environment uses python version ${{ inputs.python-version }}
      run: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init --path)"
        if pipenv run python -V | grep -q "${{ inputs.python-version }}"; then
          echo "Python ${{ inputs.python-version }} is being used."
        else
          echo "Python ${{ inputs.python-version }} is not being used. Exiting workflow."
          exit 1
        fi
      shell: bash

    - name: Run unittests
      run: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init --path)"
        PYTHONPATH=./src:./tests pipenv run pytest ./tests
      shell: bash
